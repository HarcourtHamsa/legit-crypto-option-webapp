import React from "react";
import DashboardWrapper from "../../components/app/DashboardWrapper";
import Statistics from "../../components/app/Statistics";
import FloatingButton from "../../components/FloatingButton";
import Head from "next/head";
import { TickerTape, SingleTicker } from "react-ts-tradingview-widgets";

import {
  Flex,
  Box,
  FormControl,
  FormLabel,
  Input,
  Select,
  Checkbox,
  Stack,
  Link,
  Button,
  Heading,
  Text,
  useColorModeValue,
  SimpleGrid,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
} from "@chakra-ui/react";
import { IoIosCard } from "react-icons/io";
import WithAuth from "../../HOCs/WithAuth";
import { AuthContext } from "../../context/auth";
import { useFormik } from "formik";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import helpers from "../../helpers";

function Withdraw() {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const authContext = React.useContext(AuthContext);
  const user = helpers.getUserDetailsFromLocalStorage();

  const notify = (msg, type) =>
    toast(msg, {
      type,
      position: "top-center",
      autoClose: 5000,
      hideProgressBar: true,
    });

  const formik = useFormik({
    initialValues: {
      amount: 0,
      wallet: "",
      method: "",
    },

    onSubmit: (values) => {
      if (user.amountDeposited < values.amount) {
        notify("Error: Insufficient funds", "error");
      } else {
        notify("Withdrawal request successful", "success");
      }
    },
  });

  return (
    <div>
      <DashboardWrapper>
        <Head>
          <title>Dashboard - Legit Crypto Option</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <Statistics />
        <ToastContainer />
        <Box maxW="7xl" mx={"auto"} pt={5} px={{ base: 2, sm: 12, md: 17 }}>
          <TickerTape colorTheme="dark"></TickerTape>
          <Heading
            lineHeight={"110%"}
            fontSize={{ base: "2xl", sm: "2xl", md: "2xl" }}
            mb={5}
            color="white"
            display="flex"
            flexDir="row"
            gap={'2'}
          >
            <Text>Request for Withdrawal</Text> <IoIosCard size={30}/>
          </Heading>
          <SimpleGrid
            columns={{ base: 1, md: 2 }}
            spacing={{ base: 5, lg: 8 }}
            fontWeight="bold"
          >
            <Stack
              spacing={4}
              //   mt={12}
              px={{ base: 2, md: 4 }}
              py={"5"}
              shadow={"xl"}
              //   border={"1px solid"}
              borderColor={useColorModeValue("gray.800", "gray.500")}
              rounded={"lg"}
              bg="-webkit-gradient(linear,left top,left bottom,from(#2b525a),to(#072427))"
              color="white"
            >
              <Stack spacing={10}>
                <Text fontSize="lg">Bank Transfer</Text>
                <Flex justifyContent="space-between">
                  <Text>Minimum amount:</Text>
                  <Text>$100</Text>
                </Flex>

                <Flex justifyContent="space-between">
                  <Text>Maximum amount::</Text>
                  <Text>$100000</Text>
                </Flex>

                <Flex justifyContent="space-between">
                  <Text>Charges (Fixed):</Text>
                  <Text>$0</Text>
                </Flex>

                <Flex justifyContent="space-between">
                  <Text>Charges (%):</Text>
                  <Text>$0</Text>
                </Flex>

                <Flex justifyContent="space-between">
                  <Text>Duration:</Text>
                  <Text>Instant</Text>
                </Flex>

                <Button
                  bg={"blue.400"}
                  color={"white"}
                  fontWeight="normal"
                  mt={6}
                  p={6}
                  onClick={onOpen}
                  // h={10}
                  _hover={{
                    bg: "blue.500",
                  }}
                >
                  Request Withdrawal
                </Button>
              </Stack>
            </Stack>

            <Stack
              spacing={4}
              //   mt={12}
              px={{ base: 2, md: 4 }}
              py={"5"}
              shadow={"xl"}
              //   border={"1px solid"}
              borderColor={useColorModeValue("gray.800", "gray.500")}
              rounded={"lg"}
              bg="-webkit-gradient(linear,left top,left bottom,from(#2b525a),to(#072427))"
              color="white"
            >
              <Stack spacing={8}>
                <Text fontSize="lg" fontWeight="bold">
                  Cryptocurrency
                </Text>
                <FormControl>
                  <FormLabel fontWeight="bold">Wallet Address</FormLabel>
                  <Input
                    p={"6"}
                    id="wallet"
                    name="wallet"
                    type="wallet"
                    onChange={formik.handleChange}
                    value={formik.values.wallet}
                  />
                </FormControl>

                <FormControl>
                  <FormLabel fontWeight="bold">Amount</FormLabel>
                  <Input
                    p={"6"}
                    id="amount"
                    name="amount"
                    type="amount"
                    onChange={formik.handleChange}
                    value={formik.values.amount}
                  />
                </FormControl>

                <FormControl mb={6} isRequired>
                  <FormLabel fontWeight="bold">Select Cryptocurrency</FormLabel>
                  <Select
                    placeholder=""
                    id="method"
                    name="method"
                    onChange={formik.handleChange}
                    value={formik.values.method}
                  >
                    <option value={"Bitcoin"} key={"Bitcoin"}>
                      Bitcoin
                    </option>
                    <option value={"Ethereum"} key={"Ethereum"}>
                      Ethereum
                    </option>
                    <option value={"Shiba Inu"} key={"Shiba Inu"}>
                      Shiba Inu
                    </option>
                    <option value={"USDT"} key={"USDT"}>
                      USDT
                    </option>
                  </Select>
                </FormControl>

                <Button
                  bg={"blue.400"}
                  color={"white"}
                  fontWeight="normal"
                  mt={6}
                  p={6}
                  onClick={onOpen}
                  // h={10}
                  _hover={{
                    bg: "blue.500",
                  }}
                >
                  Request Withdrawal
                </Button>
              </Stack>
            </Stack>

            <SingleTicker colorTheme="dark" width="100%"></SingleTicker>
          </SimpleGrid>
        </Box>
      </DashboardWrapper>

      <FloatingButton />

      <Modal onClose={onClose} isOpen={isOpen} isCentered>
        <ModalOverlay />
        <ModalContent>
          <form onSubmit={formik.handleSubmit}>
            <ModalHeader>Payment Portal</ModalHeader>
            <ModalCloseButton />
            <ModalBody>
              <Stack spacing={4}>
                <FormControl id="email">
                  <Input
                    type="text"
                    p={"6"}
                    id="amount"
                    name="amount"
                    value={formik.values.amount}
                    onChange={formik.handleChange}
                    placeholder="Enter amount here"
                    // onChange={formik.handleChange}
                    // value={formik.values.email}
                  />
                </FormControl>

                <FormControl id="email">
                  <Input
                    type="text"
                    p={"6"}
                    id="amount"
                    name="amount"
                    placeholder="Enter account number"
                    // onChange={formik.handleChange}
                    // value={formik.values.email}
                  />
                </FormControl>

                <FormControl id="email">
                  <Input
                    type="text"
                    p={"6"}
                    id="bank"
                    name="bank"
                    placeholder="Enter bank name"
                  />
                </FormControl>

                <FormControl id="email">
                  <Input
                    type="text"
                    p={"6"}
                    id="amount"
                    name="amount"
                    placeholder="Bank Transfer"
                    isReadOnly
                    // onChange={formik.handleChange}
                    // value={formik.values.email}
                  />
                </FormControl>
              </Stack>
            </ModalBody>

            <ModalFooter>
              <Button
                onClick={onClose}
                colorScheme="green"
                mr={2}
                fontWeight="normal"
                type="submit"
              >
                Continue
              </Button>
              <Button onClick={onClose} colorScheme="red" fontWeight="normal">
                Close
              </Button>
            </ModalFooter>
          </form>
        </ModalContent>
      </Modal>
    </div>
  );
}

export default WithAuth(Withdraw);
