import React from "react";
import {
  Flex,
  Box,
  FormControl,
  FormLabel,
  Input,
  Checkbox,
  Stack,
  Button,
  Heading,
  Text,
  useColorModeValue,
  useBreakpointValue,
} from "@chakra-ui/react";
import Particles from "react-tsparticles";
import { loadFull } from "tsparticles";
import Link from "next/link";

import Head from "next/head";
import FloatingButton from "../../components/FloatingButton";
import { useRouter } from "next/router";
import { useFormik } from "formik";
import { FiCodesandbox } from "react-icons/fi";
import helpers from "../../helpers";

import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { AuthContext } from "../../context/auth";

export default function Login() {
  const [isLoading, setIsLoading] = React.useState(false);
  const authContext = React.useContext(AuthContext);
  const router = useRouter();

  const particlesInit = async (main) => {
    console.log(main);

    // you can initialize the tsParticles instance (main) here, adding custom shapes or presets
    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready
    // starting from v2 you can add only the features you need reducing the bundle size
    await loadFull(main);
  };

  const particlesLoaded = (container) => {
    console.log(container);
  };

  const notify = (msg, type) =>
    toast(msg, {
      type,
      position: "top-center",
      autoClose: 5000,
      hideProgressBar: true,
    });

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },

    onSubmit: async (values) => {
      setIsLoading(true);
      try {
        const res = await helpers.login(values).then((data) => {
          if (data.name === "AxiosError") {
            notify("Wrong email or password", "error");
          } else {
            notify("Authentication successful!", "success");
            authContext.setUserAuthInfo(data.data.token);
            console.log("saving credentials...", data.data.data);
            authContext.setUserDetails(data.data.data);
            router.push("/app");
          }
        });
      } catch (error) {
        console.log(error);
      } finally {
        setIsLoading(false);
      }
    },
  });

  return (
    <>
      <Head>
        <title>Login - Legit Crypto Option</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
      id="hero"
        minH={"100vh"}
        align={"center"}
        justify={"center"}
        bg="rgb(18, 29, 51)"
      >
        <Particles
          width="90vw"
          height="80vh"
          style={{
            width: "100%",
            height: "100%",
            position: "absolute",
            top: "2%",
          }}
          id="tsparticles"
          init={particlesInit}
          loaded={particlesLoaded}
          options={{
            background: {
              color: {
                value: "red",
              },
              position: {
                value: "center",
              },
            },
            fpsLimit: 120,
            interactivity: {
              events: {
                onClick: {
                  enable: true,
                  mode: "push",
                },
                onHover: {
                  enable: true,
                  mode: "repulse",
                },
                resize: true,
              },
              modes: {
                push: {
                  quantity: 4,
                },
                repulse: {
                  distance: 200,
                  duration: 0.4,
                },
              },
            },
            fullScreen: {
              enable: false,
              zIndex: -1,
            },
            particles: {
              color: {
                value: "#ffffff",
              },
              links: {
                color: "#ffffff",
                distance: 150,
                enable: true,
                opacity: 0.5,
                width: 1,
              },
              collisions: {
                enable: true,
              },
              move: {
                direction: "none",
                enable: true,
                outModes: {
                  default: "bounce",
                },
                random: false,
                speed: 2,
                straight: false,
              },
              number: {
                density: {
                  enable: true,
                  area: 800,
                },
                value: 80,
              },
              opacity: {
                value: 0.5,
              },
              shape: {
                type: "circle",
              },
              size: {
                value: { min: 1, max: 5 },
              },
            },
          }}
        />
        <ToastContainer />

        <Stack spacing={4} mx={"auto"} w={"lg"} py={12} px={6}>
          <Stack align={"center"}>
            <FiCodesandbox size={40} color="#4299e1" />
          </Stack>
          <Box
            rounded={"md"}
            bg={useColorModeValue("white", "gray.700")}
            // boxShadow={"lg"}
            w={{ base: "100%", md: "100%" }}
            p={8}
          >
            <form onSubmit={formik.handleSubmit}>
              <Stack spacing={4}>
                <FormControl id="email">
                  <FormLabel fontWeight="normal">Email address</FormLabel>
                  <Input
                    p={"6"}
                    id="email"
                    name="email"
                    type="email"
                    onChange={formik.handleChange}
                    value={formik.values.email}
                  />
                </FormControl>
                <FormControl id="password">
                  <FormLabel fontWeight="normal">Password</FormLabel>
                  <Input
                    p={6}
                    id="password"
                    name="password"
                    type="password"
                    onChange={formik.handleChange}
                    value={formik.values.password}
                  />
                </FormControl>
                <Stack spacing={10}>
                  <Button
                    bg="telegram.400"
                    color={"white"}
                    fontWeight="normal"
                    type="submit"
                    mt={6}
                    p={6}
                    isLoading={isLoading}
                    // h={10}
                    _hover={{
                      bg: "blue.500",
                    }}
                  >
                    Login to your account
                  </Button>
                </Stack>
                <br />
                <Link color={"blue.400"} href="/account/signup">
                  Forgot password?
                </Link>
                <Text fontWeight="normal">
                  Don&apos;t have an account?{" "}
                  <Link href="/account/signup" color={"blue.400"}>
                    Signup
                  </Link>
                </Text>
              </Stack>
            </form>
          </Box>
        </Stack>
      </Flex>

      <FloatingButton />
    </>
  );
}
